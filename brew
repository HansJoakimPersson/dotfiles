#!/usr/bin/env bash
# shellcheck disable=SC2059

###############################################################################
# Strict Mode
###############################################################################
# Set strict mode -  via http://redsymbol.net/articles/unofficial-bash-strict-mode/
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.

# Print a helpful message if a pipeline with non-zero exit code causes the
# script to exit as described above.
#trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

# Exit immediately if a pipeline returns non-zero.
# Append "|| true" if you expect an error.
set -o errexit
# Allow the above trap be inherited by all functions in the script.
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace

# Set $IFS to only newline and tab.
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
IFS=$'\n\t'

###############################################################################
# Globals
###############################################################################
# Reset
readonly col_reset="\x1b[0m" # Text Reset

# Foreground color
readonly col_green="\x1b[32m"
readonly col_yellow="\x1b[33m"
readonly col_red="\x1b[31m"

# Special characters
readonly char_succ="✔"
readonly char_fail="✖"

error() {
	printf "${col_red}${char_fail}${col_reset}"
}

ok() {
	printf "${col_green}${char_succ}${col_reset}"
}

###############################################################################
# Main script
###############################################################################

printf "\n\n================================================================================\n"
printf "=                       Installing Homebrew packages...                        =\n"
printf "================================================================================\n"

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `brew` has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

# Check for Homebrew and install if we don't have it
printf "\n${col_yellow}Checking homebrew${col_reset} "
if test ! "$(command -v brew)"; then
	printf "\n ⇒  downloading and installing Homebrew "
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	if [[ $? != 0 ]]; then
		error "unable to install homebrew, script $0 abort!"
		exit 2
	fi
	brew analytics off
	ok
else
	printf "\n ⇒  Homebrew are already installed "
	ok
fi

# Make sure we’re using the latest Homebrew.
printf "\n\n${col_yellow}Make sure we’re using the latest Homebrew${col_reset}"
brew update

# Upgrade any already-installed formulae.
printf "\n\n${col_yellow}Upgrade any already-installed formulae${col_reset}"
brew upgrade

# Save Homebrew’s installed location.
export BREW_PREFIX=$(brew --prefix)

# Install GNU core utilities (those that come with OS X are outdated)
printf "\n\n${col_yellow}Installing core utilities${col_reset} "

brew install coreutils
brew install moreutils
brew install findutils
brew install gnu-sed

# Install a modern version of Bash.
brew install bash
brew install bash-completion2

# Install wget with IRI support
brew install wget

# Install more recent versions of some MacOS tools
brew install vim
brew install nano
brew install grep
brew install openssh
brew install screen
brew install gmp

# Install other useful binaries
brew install node
brew install the_silver_searcher
brew install fzf
brew install git
brew install git-lfs
brew install gnupg
brew install hub
brew install ghostscript 				# Also known as "sg"
brew install pipeviewer  				# Also known as "pv"
brew install rename
brew install tree 						# List directories in a tree structure
brew install zopfli
brew install zlib 						# Needed for Memcached
brew install p7zip
brew install pigz
brew install vbindiff
brew install httpie
brew install bat 						# "cat" on steroids
brew install terminal-notifier
brew install pidcat 					# Colored logcat guy
brew install ncdu   					# Find where your diskspace went
brew install shfmt 						# Autoformat shell script source code
brew install lsd 						# Color and icons for ls

# Install multimedia tools
brew install ffmpeg
brew install imagemagick
brew install Soundflower # Used to record internal sound https://github.com/mattingalls/Soundflower/releases/tag/2.0b2

# Install some CTF and Forensics tools;
printf "\n\n${col_yellow}Installing some CTF and Forensics tools${col_reset}"

# Install Java first to prevent packages that depends on it from failing
brew install adoptopenjdk
brew install docker

# Install some CTF tools;
brew install aircrack-ng #Java 1.8+ is required to install this forumula
brew install binutils
brew install binwalk
brew install cifer
brew install dex2jar
brew install dns2tcp
brew install fcrackzip
brew install foremost
brew install hashcat
brew install hashpump
brew install hydra
brew install john
brew install knock
brew install netpbm
brew install nmap
brew install pngcheck
brew install socat
brew install sqlmap
brew install tcpflow
brew install tcpreplay
brew install tcptrace
brew install ucspi-tcp # $(tcpserver) etc.
brew install xpdf
brew install xz
brew install clamav
brew install yara

# Install some Forensic tools
brew install autopsy #"java is required
brew install dc3dd
brew install volatility

# Apps
printf "\n\n${col_yellow}Installing Apps${col_reset}"
# brew install atom
# brew install adobe-creative-cloud
brew install adobe-acrobat-reader
brew install betterzip

# brew install dropbox
# brew install docker
# brew install easyfind
brew install Cyberduck
brew install fsmonitor
brew install ghidra # requires java 11+
# brew install github
brew install gpg-suite
brew install insomnia
brew install maltego
brew install microsoft-office
# brew install skype
# brew install slack
brew install transmission
# brew install vagrant
brew install viscosity
brew install vmware-fusion
brew install wireshark
brew install wireguard-tools
# brew install virtualbox # Might need to allow access in Security settings
# brew install virtualbox-extension-pack
# brew install vlc
# brew install yed
# brew install android-platform-tools
brew install visual-studio-code

# brew install powershell
# brew install signal
# brew install zoom

# Browsers
# brew install google-chrome
# brew install google-chrome-canary
# brew install firefox
# brew install firefoxnightly
# brew install webkit-nightly
# brew install chromium
brew install tor-browser
brew install brave-browser

#SQLite
brew install db-browser-for-sqlite

#MySQL
brew install mysqlworkbench

# MongoDB
brew tap mongodb/brew
brew install mongodb-community
brew install --cask mongodb-compass

#R
brew install r
brew install rstudio

# Quicklook
printf "\n\n${col_yellow}Installing Quicklook plugins${col_reset}"
brew install qlcolorcode
brew install qlmarkdown
brew install quicklook-json
brew install quicklook-csv
brew install qlstephen
brew install qlvideo
brew install suspicious-package
brew install qlprettypatch
brew install WebPQuickLook
brew install qlswift

# zsh
printf "\n\n${col_yellow}Installing zsh plugins${col_reset}"
brew install zsh-autosuggestions
brew install zsh-completions
brew install zsh-syntax-highlighting
brew install romkatv/powerlevel10k/powerlevel10k

# Fonts
brew tap homebrew/cask-fonts
brew install font-hack-nerd-font
brew install font-meslo-nerd-font

# Remove outdated versions from the cellar
printf "\n\n${col_yellow}Remove outdated versions${col_reset}"
brew cleanup

# Gem packages
#printf "\n\n${col_yellow}Installing Gem packages${col_reset}"

#Node packages
npm i -g bash-language-server
npm i -g yo generator-code