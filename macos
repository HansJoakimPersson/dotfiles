#!/usr/bin/env bash
# shellcheck disable=SC2059

# Thanks to Mathias Bynens!
# ~/.macos — https://mths.be/macos

###############################################################################
# Strict Mode
###############################################################################
# Set strict mode -  via http://redsymbol.net/articles/unofficial-bash-strict-mode/
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.

# Print a helpful message if a pipeline with non-zero exit code causes the
# script to exit as described above.
#trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

# Exit immediately if a pipeline returns non-zero.
# Append "|| true" if you expect an error.
set -o errexit
# Allow the above trap be inherited by all functions in the script.
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace

# Set $IFS to only newline and tab.
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
IFS=$'\n\t'

###############################################################################
# Globals
###############################################################################
# Reset
readonly col_reset="\x1b[0m" # Text Reset

# Foreground color
readonly col_green="\x1b[32m"
readonly col_yellow="\x1b[33m"
readonly col_red="\x1b[31m"

# Special characters
readonly char_succ="✔"
readonly char_fail="✖"

execute() {
	printf '\n ⇒ %s ' "${@/eval/}"
	if
		("*@ > /dev/null 2>&1") &
		spinner "$!"
	then
		ok
	else
		error
	fi
}

spinner() {
	local i sp n
	sp="\|/-"
	n=${#sp}
	while ps a | awk '{print $1}' | grep -q "${1}"; do
		sleep "0.75"
		#printf "\b${sp:i++%${#sp}:1}"
		printf "%s\b" "${sp:i++%n:1}"
	done
}
error() {
	printf '%s' "${col_red}${char_fail}${col_reset}"
}

ok() {
	printf '%s' "${col_green}${char_succ}${col_reset}"
}
###############################################################################
# Main script
###############################################################################

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
printf "closing any system preferences to prevent issues with automated changes "
osascript -e 'tell application "System Preferences" to quit'
ok

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

###############################################################################
# General UI/UX                                                               #
###############################################################################
printf "\n\n${col_yellow}Configuring General System UI/UX...${col_reset} "
# Set computer name (as done via System Preferences → Sharing)
#sudo scutil --set ComputerName "0x6D746873"
#sudo scutil --set HostName "0x6D746873"
#sudo scutil --set LocalHostName "0x6D746873"
#sudo execute eval 'defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "0x6D746873"

# Disable the sound effects on boot
execute eval 'sudo nvram SystemAudioVolume=" "'

# Disable transparency in the menu bar and elsewhere on Yosemite
#execute eval 'defaults write com.apple.universalaccess reduceTransparency -bool true'

# Menu bar: disable transparency
#execute eval 'defaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool true'

# Menu bar: hide the User icons
for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
	execute eval "defaults write ${domain} dontAutoLoad -array \
		/System/Library/CoreServices/Menu Extras/User.menu"
done
execute eval "defaults write com.apple.systemuiserver menuExtras -array \
	/System/Library/CoreServices/Menu Extras/Bluetooth.menu \
	/System/Library/CoreServices/Menu Extras/AirPort.menu \
	/System/Library/CoreServices/Menu Extras/Battery.menu \
	/System/Library/CoreServices/Menu Extras/Clock.menu"

# Set highlight color to green
#execute eval 'defaults write NSGlobalDomain AppleHighlightColor -string "0.764700 0.976500 0.568600"'

# Set sidebar icon size to medium
execute eval 'defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2'

# Always show scrollbars
execute eval 'defaults write NSGlobalDomain AppleShowScrollBars -string "Always"'
# Possible values: `WhenScrolling`, `Automatic` and `Always`

# Click in the scrollbar to: Jump to the spot that's clicked
execute eval 'defaults write NSGlobalDomain AppleScrollerPagingBehavior -bool true'

# Disable the over-the-top focus ring animation
execute eval 'defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false'

# Disable smooth scrolling
# (Uncomment if you’re on an older Mac that messes up the animation)
#execute eval 'defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false'

# Increase window resize speed for Cocoa applications
execute eval 'defaults write NSGlobalDomain NSWindowResizeTime -float 0.001'

# Expand save panel by default
execute eval 'defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true'
execute eval 'defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true'

# Expand print panel by default
execute eval 'defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true'
execute eval 'defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true'

# Save to disk (not to iCloud) by default
execute eval 'defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false'

# Automatically quit printer app once the print jobs complete
execute eval 'defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true'

# Disable the “Are you sure you want to open this application?” dialog
execute eval 'defaults write com.apple.LaunchServices LSQuarantine -bool false'

# Remove duplicates in the “Open With” menu (also see `lscleanup` alias)
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user

# Display ASCII control characters using caret notation in standard text views
# Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
execute eval 'defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true'

# Disable Resume system-wide
execute eval 'defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false'

# Disable automatic termination of inactive apps
execute eval 'defaults write NSGlobalDomain NSDisableAutomaticTermination -bool false'

# Disable the crash reporter
#execute eval 'defaults write com.apple.CrashReporter DialogType -string "none"

# Set Help Viewer windows to non-floating mode
execute eval 'defaults write com.apple.helpviewer DevMode -bool true'

# Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)
# Commented out, as this is known to cause problems in various Adobe apps :(
# See https://github.com/mathiasbynens/dotfiles/issues/237
#echo "0x08000100:0" > ~/.CFUserTextEncoding

# Reveal IP address, hostname, OS version, etc. when clicking the clock
# in the login window
execute eval 'defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName'

# Disable Notification Center and remove the menu bar icon
execute eval 'launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2>/dev/null'

# Disable automatic capitalization as it’s annoying when typing code
execute eval 'defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false'

# Disable smart dashes as they’re annoying when typing code
execute eval 'defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false'

# Disable automatic period substitution as it’s annoying when typing code
execute eval 'defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false'

# Disable smart quotes as they’re annoying when typing code
execute eval 'defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false'

# Disable auto-correct
execute eval 'defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false'

# Ask to keep changes when closing documents
execute eval 'defaults write NSGlobalDomain NSCloseAlwaysConfirmsChanges -bool true'

# Change default browser
# TODO: execute eval 'defaults write NSGlobalDomain NSPreferredWebServices
# Set DuckDuckGo as the search engine
execute eval 'defaults write NSGlobalDomain NSPreferredWebServices {
	NSWebServicesProviderWebSearch = {
		NSDefaultDisplayName = DuckDuckGo;
		NSProviderIdentifier = "com.duckduckgo";
	};
}'

# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
# all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.
#rm -rf ~/Library/Application Support/Dock/desktoppicture.db
#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg
#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg

###############################################################################
# MacBookPro Touch Bar                                                        #
###############################################################################
printf "\n\nConfiguring MacBookPro Touch Bar..."

# Always display full control strip (ignoring App Controls)
execute eval 'defaults write com.apple.touchbar.agent PresentationModeGlobal fullControlStrip'

# Change Touch Bar control strip actions
execute eval 'defaults write com.apple.controlstrip { MiniCustomized = (
  "com.apple.system.brightness",
  "com.apple.system.volume",
  "com.apple.system.media-play-pause",
  "com.apple.system.screen-lock"
 ); }'

###############################################################################
# Firewall and code signing                                                         #
###############################################################################
printf "\n\nConfiguring Firewall and code signing..."

# Enable Firewall
execute eval 'sudo  /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on'
# Enable Firewall logging
execute eval 'sudo  /usr/libexec/ApplicationFirewall/socketfilterfw --setloggingmode on'
# Disable built-in and downloaded code-signed apps by default
execute eval 'sudo  /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsigned off'
execute eval 'sudo  /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsignedapp off'

###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################
printf "\n\nConfiguring trackpad, keyboard, Bluetooth accessories, and input..."

# Trackpad: enable tap to click for this user and for the login screen
execute eval 'defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true'
execute eval 'defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1'

# Trackpad: map bottom right corner to right-click
execute eval 'defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2'
execute eval 'defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true'
execute eval 'defaults write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1'
execute eval 'defaults write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true'

# Trackpad: disable swipe from right to show notification center
execute eval 'defaults write com.apple.AppleMultitouchTrackpad.trackpad TrackpadTwoFingerFromRightEdgeSwipeGesture -int 0'

# Disable “natural” (Lion-style) scrolling
execute eval 'defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false'

# Increase sound quality for Bluetooth headphones/headsets
execute eval 'defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40'

# mute all sounds, incl volume change feedback
#execute eval 'defaults write "com.apple.sound.beep.feedback" -int 0'
#execute eval 'defaults write com.apple.systemsound 'com.apple.sound.beep.volume' -float 0'
#execute eval 'defaults write "com.apple.systemsound" "com.apple.sound.uiaudio.enabled" -int 0'

# Enable full keyboard access for all controls
# (e.g. enable Tab in modal dialogs)
execute eval 'defaults write NSGlobalDomain AppleKeyboardUIMode -int 3'

# Enable access for assistive devices
#echo -n 'a' | sudo tee /private/var/db/.AccessibilityAPIEnabled > /dev/null 2>&1'
#sudo chmod 444 /private/var/db/.AccessibilityAPIEnabled
# TODO: avoid GUI password prompt somehow (http://apple.stackexchange.com/q/60476/4408)
#sudo osascript -e 'tell application "System Events" to set UI elements enabled to true'

# Disable press-and-hold for keys in favor of key repeat
execute eval 'defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false'

# Set a blazingly fast keyboard repeat rate
execute eval 'defaults write NSGlobalDomain KeyRepeat -int 1'
execute eval 'defaults write NSGlobalDomain InitialKeyRepeat -int 10'

# Set language and text formats
# Note: if you’re in the US, replace `EUR` with `USD`, `Centimeters` with
# `Inches`, `en_GB` with `en_US`, and `true` with `false`.
execute eval 'defaults write NSGlobalDomain AppleLanguages -array "en-GB" "en-SE"'
execute eval 'defaults write NSGlobalDomain AppleLocale -string "en-SE"'

# Show language menu in the top right corner of the boot screen
execute eval 'defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true'

# Set the timezone; see `sudo systemsetup -listtimezones` for other values
execute eval 'systemsetup -settimezone "Europe/Brussels" >/dev/null'

# Stop iTunes from responding to the keyboard media keys
#launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null

###############################################################################
# Energy saving                                                               #
###############################################################################
printf "\n\nConfiguring Energy saving..."

# Enable lid wakeup
execute eval 'sudo pmset -a lidwake 1'

# Restart automatically on power loss
execute eval 'sudo pmset -a autorestart 1'

# Restart automatically if the computer freezes
execute eval 'sudo systemsetup -setrestartfreeze on'

# Sleep the display after 15 minutes
execute eval 'sudo pmset -a displaysleep 15'

# Disable machine sleep while charging
execute eval 'sudo pmset -c sleep 0'

# Set machine sleep to 5 minutes on battery
execute eval 'sudo pmset -b sleep 5'

# Set standby delay to 24 hours (default is 1 hour)
execute eval 'sudo pmset -a standbydelay 86400'

# Never go into computer sleep mode after 20min
execute eval 'sudo systemsetup -setcomputersleep 20'

# Hibernation mode
# 0: Disable hibernation (speeds up entering sleep mode)
# 3: Copy RAM to disk so the system state can still be restored in case of a
#    power failure.
execute eval 'sudo pmset -a hibernatemode 0'

# Remove the sleep image file to save disk space
#sudo rm /private/var/vm/sleepimage
# Create a zero-byte file instead…
#sudo touch /private/var/vm/sleepimage
# …and make sure it can’t be rewritten
#sudo chflags uchg /private/var/vm/sleepimage

###############################################################################
# Screen                                                                      #
###############################################################################
printf "\n\nConfiguring Display and Screen Settings..."

# Require password immediately after sleep or screen saver begins
execute eval 'defaults write com.apple.screensaver askForPassword -int 1'
execute eval 'defaults write com.apple.screensaver askForPasswordDelay -int 0'

# Save screenshots to the desktop
execute eval "defaults write com.apple.screencapture location -string ${HOME}/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
execute eval 'defaults write com.apple.screencapture type -string "png"'

# Hide all desktop icons because who need 'em'
execute eval 'defaults write com.apple.finder CreateDesktop -bool false'
# Disable shadow in screenshots
execute eval 'defaults write com.apple.screencapture disable-shadow -bool true'

# Enable subpixel font rendering on non-Apple LCDs
# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
execute eval 'defaults write NSGlobalDomain AppleFontSmoothing -int 2'

# Re-enable subpixel antialiasing
execute eval 'defaults write NSGlobalDomain CGFontRenderingFontSmoothingDisabled -bool false'

# Enable HiDPI display modes (requires restart)
execute eval 'defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true'

###############################################################################
# Finder                                                                      #
###############################################################################
printf "\n\nConfiguring Finder settings..."

# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
execute eval 'defaults write com.apple.finder QuitMenuItem -bool true'

# Finder: disable window animations and Get Info animations
execute eval 'defaults write com.apple.finder DisableAllAnimations -bool true'

# Set Desktop as the default location for new Finder windows
# For other paths, use `PfLo` and `file:///full/path/here/`
execute eval 'defaults write com.apple.finder NewWindowTarget -string "PfDe"'
execute eval "defaults write com.apple.finder NewWindowTargetPath -string 'file://${HOME}/Desktop/'"

# Show icons for hard drives, servers, and removable media on the desktop
execute eval 'defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false'
execute eval 'defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false'
execute eval 'defaults write com.apple.finder ShowMountedServersOnDesktop -bool false'
execute eval 'defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false'

# Finder: show hidden files by default
execute eval 'defaults write com.apple.finder AppleShowAllFiles -bool true'

# Finder: show all filename extensions
execute eval 'defaults write NSGlobalDomain AppleShowAllExtensions -bool true'

# Finder: show status bar
execute eval 'defaults write com.apple.finder ShowStatusBar -bool true'

# Finder: show path bar
execute eval 'defaults write com.apple.finder ShowPathbar -bool true'

# Remove recent tags
execute eval 'defaults write com.apple.finder ShowRecentTags -bool false'

# Disable the warning before emptying the Trash
execute eval 'defaults write com.apple.finder WarnOnEmptyTrash -bool true'

# Display full POSIX path as Finder window title
execute eval 'defaults write com.apple.finder _FXShowPosixPathInTitle -bool true'

# Keep folders on top when sorting by name
execute eval 'defaults write com.apple.finder _FXSortFoldersFirst -bool true'

# When performing a search, search the current folder by default
execute eval 'defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"'

# Disable the warning when changing a file extension
execute eval 'defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false'

# Set the thirty-day automatic Trash removal option
execute eval 'defaults write com.apple.finder FXRemoveOldTrashItems -bool true'

# Enable spring loading for directories
execute eval 'defaults write NSGlobalDomain com.apple.springing.enabled -bool true'

# Remove the spring loading delay for directories
execute eval 'defaults write NSGlobalDomain com.apple.springing.delay -float 0'

# Avoid creating .DS_Store files on network or USB volumes
execute eval 'defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true'
execute eval 'defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true'

# Disable disk image verification
#execute eval 'defaults write com.apple.frameworks.diskimages skip-verify -bool true'
#execute eval 'defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true'
#execute eval 'defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true'

# Automatically open a new Finder window when a volume is mounted
#execute eval 'defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true'
#execute eval 'defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true'
#execute eval 'defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true'

# Show item info near icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist

# Show item info to the right of the icons on the desktop
/usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist

# Enable snap-to-grid for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

# Increase grid spacing for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist

# Increase the size of icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist

# Use list view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `glyv`
execute eval 'defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"'

# Disable the warning before emptying the Trash
execute eval 'defaults write com.apple.finder WarnOnEmptyTrash -bool false'

# Empty Trash securely by default
execute eval 'defaults write com.apple.finder EmptyTrashSecurely -bool true'

# Enable AirDrop over Ethernet and on unsupported Macs running Lion
execute eval 'defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true'

# Show the ~/Library folder
execute eval 'chflags nohidden ~/Library'

# Show the /Volumes folder
execute eval 'chflags nohidden /Volumes'

# Remove Dropbox’s green checkmark icons in Finder
#file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
#[ -e "${file}" ] && mv -f "${file}" "${file}.bak"

# Expand the following File Info panes:
# “General”, “Open with”, and “Sharing & Permissions”
execute eval "defaults write com.apple.finder FXInfoPanesExpanded -dict \
	General -bool true \
	OpenWith -bool true \
	Privileges -bool true"

###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################

# Enable highlight hover effect for the grid view of a stack (Dock)
execute eval 'defaults write com.apple.dock mouse-over-hilite-stack -bool true'

# Set the icon size of Dock items to 36 pixels
execute eval 'defaults write com.apple.dock tilesize -int 49'

# Change minimize/maximize window effect
#execute eval 'defaults write com.apple.dock mineffect -string "scale"'

# Minimize windows into their application’s icon
execute eval 'defaults write com.apple.dock minimize-to-application -bool true'

# Enable spring loading for all Dock items
execute eval 'defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true'

# Show indicator lights for open applications in the Dock
execute eval 'defaults write com.apple.dock show-process-indicators -bool true'

# Wipe all (default) app icons from the Dock
# This is only really useful when setting up a new Mac, or if you don’t use
# the Dock to launch apps.
#execute eval 'defaults write com.apple.dock persistent-apps -array'

# Show only open applications in the Dock
#execute eval 'defaults write com.apple.dock static-only -bool true'

# Don’t animate opening applications from the Dock
#execute eval 'defaults write com.apple.dock launchanim -bool false'

# Speed up Mission Control animations
execute eval 'defaults write com.apple.dock expose-animation-duration -float 0.1'

# Don’t group windows by application in Mission Control
# (i.e. use the old Exposé behavior instead)
execute eval 'defaults write com.apple.dock expose-group-by-app -bool false'

# Disable Dashboard
execute eval 'defaults write com.apple.dashboard mcx-disabled -bool true'

# Don’t show Dashboard as a Space
execute eval 'defaults write com.apple.dock dashboard-in-overlay -bool true'

# Don’t automatically rearrange Spaces based on most recent use
execute eval 'defaults write com.apple.dock mru-spaces -bool false'

# Remove the auto-hiding Dock delay
#execute eval 'defaults write com.apple.dock autohide-delay -float 0'
# Remove the animation when hiding/showing the Dock
#execute eval 'defaults write com.apple.dock autohide-time-modifier -float 0'

# Automatically hide and show the Dock
#execute eval 'defaults write com.apple.dock autohide -bool true'

# Make Dock icons of hidden applications translucent
execute eval 'defaults write com.apple.dock showhidden -bool true'

# Dock magnification
execute eval 'defaults write com.apple.dock magnification -bool true'

# Icon size of magnified Dock items
execute eval 'defaults write com.apple.dock largesize -int 64'

# Show recent applications in Dock
execute eval 'defaults write com.apple.dock show-recents -bool true'

# Disable the Launchpad gesture (pinch with thumb and three fingers)
#execute eval 'defaults write com.apple.dock showLaunchpadGestureEnabled -int 0'

# Reset Launchpad, but keep the desktop wallpaper intact
#TODO: Modify instead of reset launchpad
find "${HOME}/Library/Application Support/Dock" -name "*-*.db" -maxdepth 1 -delete

# Add iOS & Watch Simulator to Launchpad
#sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" "/Applications/Simulator.app"
#sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app" "/Applications/Simulator (Watch).app"

# Add a spacer to the left side of the Dock (where the applications are)
execute eval 'defaults write com.apple.dock persistent-apps -array-add {tile-data={}
tile-type="spacer-tile"
}'
# Add a spacer to the right side of the Dock (where the Trash is)
execute eval 'defaults write com.apple.dock persistent-others -array-add {tile-data={}
tile-type="spacer-tile"
}'

# Add more applications in springboard
execute eval 'defaults write com.apple.dock springboard-columns -int 8'
execute eval 'defaults write com.apple.dock springboard-columns -int 6'

# Hot corners
# Possible values:
#  0: no-op
#  2: Mission Control
#  3: Show application windows
#  4: Desktop
#  5: Start screen saver
#  6: Disable screen saver
#  7: Dashboard
# 10: Put display to sleep
# 11: Launchpad
# 12: Notification Center
# 13: Lock Screen
# Top left screen corner → Mission Control
#execute eval 'defaults write com.apple.dock wvous-tl-corner -int 2'
#execute eval 'defaults write com.apple.dock wvous-tl-modifier -int 0'
# Top right screen corner → Desktop
#execute eval 'defaults write com.apple.dock wvous-tr-corner -int 4
#execute eval 'defaults write com.apple.dock wvous-tr-modifier -int 0'
# Bottom left screen corner → Start screen saver
#execute eval 'defaults write com.apple.dock wvous-bl-corner -int 5
#execute eval 'defaults write com.apple.dock wvous-bl-modifier -int 0'

###############################################################################
# Safari & WebKit                                                             #
###############################################################################

# Privacy: don’t send search queries to Apple
execute eval 'defaults write com.apple.Safari UniversalSearchEnabled -bool false'
execute eval 'defaults write com.apple.Safari SuppressSearchSuggestions -bool true'

# Press Tab to highlight each item on a web page
execute eval 'defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true'

# Show the full URL in the address bar (note: this still hides the scheme)
execute eval 'defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true'

# Set Safari’s home page to `about:blank` for faster loading
execute eval 'defaults write com.apple.Safari HomePage -string "about:blank"'

# Prevent Safari from opening ‘safe’ files automatically after downloading
execute eval 'defaults write com.apple.Safari AutoOpenSafeDownloads -bool false'

# Allow hitting the Backspace key to go to the previous page in history
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true'

# Hide Safari’s bookmarks bar by default
execute eval 'defaults write com.apple.Safari ShowFavoritesBar -bool false'

# Hide Safari’s sidebar in Top Sites
execute eval 'defaults write com.apple.Safari ShowSidebarInTopSites -bool false'

# Disable Safari’s thumbnail cache for History and Top Sites
execute eval 'defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2'

# Enable Safari’s debug menu
execute eval 'defaults write com.apple.Safari IncludeInternalDebugMenu -bool true'

# Make Safari’s search banners default to Contains instead of Starts With
execute eval 'defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false'

# Remove useless icons from Safari’s bookmarks bar
execute eval 'defaults write com.apple.Safari ProxiesInBookmarksBar "()"'

# Enable the Develop menu and the Web Inspector in Safari
execute eval 'defaults write com.apple.Safari IncludeDevelopMenu -bool true'
execute eval 'defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true'

# Add a context menu item for showing the Web Inspector in web views
execute eval 'defaults write NSGlobalDomain WebKitDeveloperExtras -bool true'

# Enable continuous spellchecking
execute eval 'defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true'
# Disable auto-correct
execute eval 'defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false'

# Disable AutoFill
execute eval 'defaults write com.apple.Safari AutoFillFromAddressBook -bool false'
execute eval 'defaults write com.apple.Safari AutoFillPasswords -bool false'
execute eval 'defaults write com.apple.Safari AutoFillCreditCardData -bool false'
execute eval 'defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false'

# Warn about fraudulent websites
execute eval 'defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true'

# Disable plug-ins
execute eval 'defaults write com.apple.Safari WebKitPluginsEnabled -bool false'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false'

# Disable Java
execute eval 'defaults write com.apple.Safari WebKitJavaEnabled -bool false'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false'

# Block pop-up windows
execute eval 'defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false'
execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false'

# Disable auto-playing video
#execute eval 'defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false'
#execute eval 'defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false'
#execute eval 'defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false'
#execute eval 'defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false'

# Enable “Do Not Track”
execute eval 'defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true'

# Update extensions automatically
execute eval 'defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true'

# Customise Safari toolbar items
execute eval 'defaults write com.apple.safari "NSToolbar Configuration BrowserToolbarIdentifier-v2" {
  "TB Default Item Identifiers" =     (
    BackForwardToolbarIdentifier,
    SidebarToolbarIdentifier,
    NSToolbarFlexibleSpaceItem,
    "com.el1t.uBlock-3NU33NW2M3 toolbarItem",
    InputFieldsToolbarIdentifier,
    NSToolbarFlexibleSpaceItem,
    ShareToolbarIdentifier,
    TabPickerToolbarIdentifier
  );
  "TB Display Mode" = 2;
  "TB Icon Size Mode" = 1;
  "TB Is Shown" = 1;
  "TB Item Identifiers" =     (
    NSToolbarFlexibleSpaceItem,
    InputFieldsToolbarIdentifier,
    NSToolbarFlexibleSpaceItem,
    ShareToolbarIdentifier
  );
  "TB Size Mode" = 1;
}'

###############################################################################
# Mail                                                                        #
###############################################################################

# Disable send and reply animations in Mail.app
execute eval 'defaults write com.apple.mail DisableReplyAnimations -bool true'
execute eval 'defaults write com.apple.mail DisableSendAnimations -bool true'

# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
execute eval 'defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false'

# Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
execute eval 'defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" -string @\U21a9'

# Display emails in threaded mode, sorted by date (oldest at the top)
execute eval 'defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"'
execute eval 'defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"'
execute eval 'defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"'

# Disable inline attachments (just show the icons)
execute eval 'defaults write com.apple.mail DisableInlineAttachmentViewing -bool true'

# Disable automatic spell checking
execute eval 'defaults write com.apple.mail SpellCheckingBehavior -string "NoSpellCheckingEnabled"'

###############################################################################
# Spotlight                                                                   #
###############################################################################

# Hide Spotlight tray-icon (and subsequent helper)
#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
# Disable Spotlight indexing for any volume that gets mounted and has not yet
# been indexed before.
# Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
#sudo execute eval 'defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
# Change indexing order and disable some search results
# Yosemite-specific search results (remove them if you are using macOS 10.9 or older):
# 	MENU_DEFINITION
# 	MENU_CONVERSION
# 	MENU_EXPRESSION
# 	MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
# 	MENU_WEBSEARCH             (send search queries to Apple)
# 	MENU_OTHER
# execute eval "defaults write com.apple.spotlight orderedItems -array \
# 	{"enabled" = 1
# "name"                  = "APPLICATIONS"
# }' \
# 	'{"enabled" = 1
# "name"                  = "SYSTEM_PREFS"
# }' \
# 	'{"enabled" = 1
# "name"                  = "DIRECTORIES"
# }' \
# 	'{"enabled" = 1
# "name"                  = "PDF"
# }' \
# 	'{"enabled" = 1
# "name"                  = "FONTS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "DOCUMENTS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MESSAGES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "CONTACT"
# }' \
# 	'{"enabled" = 0
# "name"                  = "EVENT_TODO"
# }' \
# 	'{"enabled" = 0
# "name"                  = "IMAGES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "BOOKMARKS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MUSIC"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MOVIES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "PRESENTATIONS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "SPREADSHEETS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "SOURCE"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_DEFINITION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_OTHER"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_CONVERSION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_EXPRESSION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_WEBSEARCH"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_SPOTLIGHT_SUGGESTIONS"
# }"
# Load new settings before rebuilding the index
killall mds >/dev/null  2>&1
# Make sure indexing is enabled for the main volume
sudo mdutil -i on / >/dev/null
# Rebuild the index from scratch
sudo mdutil -E / >/dev/null

###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################

# Only use UTF-8 in Terminal.app
execute eval 'defaults write com.apple.terminal StringEncodings -array 4'

# Use a modified version of the Solarized Dark theme by default in Terminal.app
# osascript <<EOD
#
# tell application "Terminal"
#
# 	local allOpenedWindows
# 	local initialOpenedWindows
# 	local windowID
# 	set themeName to "Solarized Dark xterm-256color"
#
# 	(* Store the IDs of all the open terminal windows. *)
# 	set initialOpenedWindows to id of every window
#
# 	(* Open the custom theme so that it gets added to the list
# 	   of available terminal themes (note: this will open two
# 	   additional terminal windows). *)
# 	do shell script "open '$HOME/init/" & themeName & ".terminal'"
#
# 	(* Wait a little bit to ensure that the custom theme is added. *)
# 	delay 1
#
# 	(* Set the custom theme as the default terminal theme. *)
# 	set default settings to settings set themeName
#
# 	(* Get the IDs of all the currently opened terminal windows. *)
# 	set allOpenedWindows to id of every window
#
# 	repeat with windowID in allOpenedWindows
#
# 		(* Close the additional windows that were opened in order
# 		   to add the custom theme to the list of terminal themes. *)
# 		if initialOpenedWindows does not contain windowID then
# 			close (every window whose id is windowID)
#
# 		(* Change the theme for the initial opened terminal windows
# 		   to remove the need to close them in order for the custom
# 		   theme to be applied. *)
# 		else
# 			set current settings of tabs of (every window whose id is windowID) to settings set themeName
# 		end if
#
# 	end repeat
#
# end tell
#
# EOD

# Enable “focus follows mouse” for Terminal.app and all X11 apps
# i.e. hover over a window and start typing in it without clicking first
#execute eval 'defaults write com.apple.terminal FocusFollowsMouse -bool true'
#execute eval 'defaults write org.x.X11 wm_ffm -bool true'

# Enable Secure Keyboard Entry in Terminal.app
# See: https://security.stackexchange.com/a/47786/8918
execute eval 'defaults write com.apple.terminal SecureKeyboardEntry -bool true'

# Disable the annoying line marks
execute eval 'defaults write com.apple.Terminal ShowLineMarks -int 0'

# Install the Solarized Dark theme for iTerm
#TODO: open "${HOME}/init/Solarized Dark.itermcolors"

# Don’t display the annoying prompt when quitting iTerm
#execute eval 'defaults write com.googlecode.iterm2 PromptOnQuit -bool false'

###############################################################################
# Time Machine                                                                #
###############################################################################

# Prevent Time Machine from prompting to use new hard drives as backup volume
execute eval 'defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true'

# Disable local Time Machine backups
#hash tmutil &> /dev/null && sudo tmutil disablelocal

###############################################################################
# Activity Monitor                                                            #
###############################################################################

# Show the main window when launching Activity Monitor
execute eval 'defaults write com.apple.ActivityMonitor OpenMainWindow -bool true'

# Visualize CPU usage in the Activity Monitor Dock icon
execute eval 'defaults write com.apple.ActivityMonitor IconType -int 5'

# Show all processes in Activity Monitor
execute eval 'defaults write com.apple.ActivityMonitor ShowCategory -int 0'

# Set sort column
execute eval "defaults write com.apple.ActivityMonitor UserColumnSortPerTab -dict \
	'0' { direction = 0
sort                        = CPUUsage
}' \
	'1' '{ direction = 0
sort                        = ResidentSize
}' \
	'2' '{ direction = 0
sort                        = 12HRPower
}' \
	'3' '{ direction = 0
sort                        = bytesWritten
}' \
	'4' '{ direction = 0
sort                        = rxBytes
}"
execute eval 'defaults write com.apple.ActivityMonitor SortDirection -int 0'

# Show Data in the Disk graph (instead of IO)
execute eval 'defaults write com.apple.ActivityMonitor DiskGraphType -int 1'

# Show Data in the Network graph (instead of packets)
execute eval 'defaults write com.apple.ActivityMonitor NetworkGraphType -int 1'

###############################################################################
# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #
###############################################################################

# Enable the debug menu in Address Book
execute eval 'defaults write com.apple.addressbook ABShowDebugMenu -bool true'

# Enable Dashboard dev mode (allows keeping widgets on the desktop)
execute eval 'defaults write com.apple.dashboard devmode -bool true'

# Enable the debug menu in iCal (pre-10.8)
execute eval 'defaults write com.apple.iCal IncludeDebugMenu -bool true'

# Use plain text mode for new TextEdit documents
execute eval 'defaults write com.apple.TextEdit RichText -int 0'
# Open and save files as UTF-8 in TextEdit
execute eval 'defaults write com.apple.TextEdit PlainTextEncoding -int 4'
execute eval 'defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4'

# Enable the debug menu in Disk Utility
execute eval 'defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true'
execute eval 'defaults write com.apple.DiskUtility advanced-image-options -bool true'

# Auto-play videos when opened with QuickTime Player
execute eval 'defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true'

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
execute eval 'defaults write com.apple.appstore WebKitDeveloperExtras -bool true'

# Enable Debug Menu in the Mac App Store
execute eval 'defaults write com.apple.appstore ShowDebugMenu -bool true'

# Enable the automatic update check
execute eval 'defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true'

# Check for software updates daily, not just once per week
execute eval 'defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1'

# Download newly available updates in background
execute eval 'defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1'

# Install System data files & security updates
execute eval 'defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1'

# Automatically download apps purchased on other Macs
#execute eval 'defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1'

# As of macOS Mojave, the following command can be run with root privileges to enable macOS updates to be installed automatically:
execute eval 'defaults write com.apple.SoftwareUpdate AutomaticallyInstallMacOSUpdates -bool true'

# Turn on app auto-update
execute eval 'defaults write com.apple.commerce AutoUpdate -bool true'

# Allow the App Store to reboot machine on macOS updates
execute eval 'defaults write com.apple.commerce AutoUpdateRestartRequired -bool true'

###############################################################################
# Photos                                                                      #
###############################################################################

# Prevent Photos from opening automatically when devices are plugged in
execute eval 'defaults write com.apple.ImageCapture disableHotPlug -bool true'

###############################################################################
# Messages                                                                    #
###############################################################################

# Disable automatic emoji substitution (i.e. use plain text smileys)
execute eval 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false'

# Disable smart quotes as it’s annoying for messages that contain code
execute eval 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false'

# Disable continuous spell checking
execute eval 'defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false'

###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################

# Allow installing user scripts via GitHub Gist or Userscripts.org
execute eval 'defaults write com.google.Chrome ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"'
execute eval 'defaults write com.google.Chrome.canary ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"'

# Disable the all too sensitive backswipe on trackpads
execute eval 'defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false'
execute eval 'defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false'

# Disable the all too sensitive backswipe on Magic Mouse
execute eval 'defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false'
execute eval 'defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false'

# Use the system-native print preview dialog
execute eval 'defaults write com.google.Chrome DisablePrintPreview -bool true'
execute eval 'defaults write com.google.Chrome.canary DisablePrintPreview -bool true'

# Expand the print dialog by default
execute eval 'defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true'
execute eval 'defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true'

###############################################################################
# GPGMail 2                                                                   #
###############################################################################

# Disable signing emails by default
execute eval 'defaults write ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault -bool false'

###############################################################################
# Opera & Opera Developer                                                     #
###############################################################################

# Expand the print dialog by default
execute eval 'defaults write com.operasoftware.Opera PMPrintingExpandedStateForPrint2 -boolean true'
execute eval 'defaults write com.operasoftware.OperaDeveloper PMPrintingExpandedStateForPrint2 -boolean true'

###############################################################################
# SizeUp.app                                                                  #
###############################################################################

# Start SizeUp at login
execute eval 'defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true'

# Don’t show the preferences window on next start
execute eval 'defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false'

###############################################################################
# Sublime Text                                                                #
###############################################################################

# Install Sublime Text settings
cp -r init/Preferences.sublime-settings ~/Library/Application\ Support/Sublime\ Text*/Packages/User/Preferences.sublime-settings 2>/dev/null

###############################################################################
# Spectacle.app                                                               #
###############################################################################

# Set up my preferred keyboard shortcuts
cp -r init/spectacle.json ~/Library/Application\ Support/Spectacle/Shortcuts.json 2>/dev/null

###############################################################################
# Transmission.app                                                            #
###############################################################################

# Use `~/Documents/Torrents` to store incomplete downloads
execute eval 'defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true'
execute eval "defaults write org.m0k.transmission IncompleteDownloadFolder -string ${HOME}/Documents/Torrents"

# Use `~/Downloads` to store completed downloads
execute eval 'defaults write org.m0k.transmission DownloadLocationConstant -bool true'

# Don’t prompt for confirmation before downloading
execute eval 'defaults write org.m0k.transmission DownloadAsk -bool false'
execute eval 'defaults write org.m0k.transmission MagnetOpenAsk -bool false'

# Don’t prompt for confirmation before removing non-downloading active transfers
execute eval 'defaults write org.m0k.transmission CheckRemoveDownloading -bool true'

# Trash original torrent files
execute eval 'defaults write org.m0k.transmission DeleteOriginalTorrent -bool true'

# Hide the donate message
execute eval 'defaults write org.m0k.transmission WarningDonate -bool false'
# Hide the legal disclaimer
execute eval 'defaults write org.m0k.transmission WarningLegal -bool false'

# IP block list.
# Source: https://giuliomac.wordpress.com/2014/02/19/best-blocklist-for-transmission/
execute eval 'defaults write org.m0k.transmission BlocklistNew -bool true'
execute eval 'defaults write org.m0k.transmission BlocklistURL -string "http://john.bitsurge.net/public/biglist.p2p.gz"'
execute eval 'defaults write org.m0k.transmission BlocklistAutoUpdate -bool true'

# Randomize port on launch
execute eval 'defaults write org.m0k.transmission RandomPort -bool true'

###############################################################################
# Twitter.app                                                                 #
###############################################################################

# Disable smart quotes as it’s annoying for code tweets
execute eval 'defaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool false'

# Show the app window when clicking the menu bar icon
execute eval 'defaults write com.twitter.twitter-mac MenuItemBehavior -int 1'

# Enable the hidden ‘Develop’ menu
execute eval 'defaults write com.twitter.twitter-mac ShowDevelopMenu -bool true'

# Open links in the background
execute eval 'defaults write com.twitter.twitter-mac openLinksInBackground -bool true'

# Allow closing the ‘new tweet’ window by pressing `Esc`
execute eval 'defaults write com.twitter.twitter-mac ESCClosesComposeWindow -bool true'

# Show full names rather than Twitter handles
execute eval 'defaults write com.twitter.twitter-mac ShowFullNames -bool true'

# Hide the app in the background if it’s not the front-most window
execute eval 'defaults write com.twitter.twitter-mac HideInBackground -bool true'

###############################################################################
# Tweetbot.app                                                                #
###############################################################################

# Bypass the annoyingly slow t.co URL shortener
execute eval 'defaults write com.tapbots.TweetbotMac OpenURLsDirectly -bool true'

###############################################################################
# Flycut.app                                                                  #
###############################################################################

execute eval 'defaults write com.generalarcade.flycut menuIcon 3'
execute eval 'defaults write com.generalarcade.flycut loadOnStartup -bool true'
execute eval 'defaults write com.generalarcade.flycut rememberNum -int 60'
execute eval 'defaults write com.generalarcade.flycut pasteMovesToTop -bool true'
execute eval 'defaults write com.generalarcade.flycut removeDuplicates -bool true'

###############################################################################
# Spotify.app
# thinks it's super important and should always be started on login. Fuck that.                                                                #
###############################################################################

mkdir -p ~/Library/Application\ Support/Spotify
touch ~/Library/Application\ Support/Spotify/prefs
echo 'app.autostart-mode="off"' >>~/Library/Application\ Support/Spotify/prefs
echo 'app.autostart-banner-seen=true' >>~/Library/Application\ Support/Spotify/prefs
# VMware Fusion                                                               #
execute eval 'defaults write com.vmware.fusion showStartMenu3 -bool false'

# ###########################################################
# /etc/hosts -- spyware/ad blocking
# ###########################################################
# action   "cp /etc/hosts /etc/hosts.backup"
# sudo   cp /etc/hosts /etc/hosts.backup
# ok
# action   "cp ./configs/hosts /etc/hosts"
# sudo   cp ./configs/hosts /etc/hosts
# ok
# echo   -h "Your /etc/hosts file has been updated. Last version is saved in /etc/hosts.backup"

###############################################################################
# Kill affected applications                                                  #
###############################################################################

# Need to restart for several changes to take effect. Trackpad settings in particular.
printf "Doing a soft restart of affected apps. You should restart when everything is finished."

for app in "Activity Monitor" \
	"Address Book" \
	"Calendar" \
	"cfprefsd" \
	"Contacts" \
	"ControlStrip" \
	"Dock" \
	"Finder" \
	"Google Chrome Canary" \
	"Google Chrome" \
	"Mail" \
	"Messages" \
	"Opera" \
	"Photos" \
	"Safari" \
	"SizeUp" \
	"Spectacle" \
	"SystemUIServer" \
	"TextEdit" \
	"Transmission" \
	"Tweetbot" \
	"Twitter" \
	"iCal"; do
	killall "${app}" &>/dev/null
done
printf "Done. Note that some of these changes require a logout/restart to take effect."
