#!/usr/bin/env bash
# shellcheck disable=SC2059

# Thanks to Mathias Bynens!
# ~/.macos — https://mths.be/macos

###############################################################################
# Strict Mode
###############################################################################
# Set strict mode -  via http://redsymbol.net/articles/unofficial-bash-strict-mode/
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.

# Print a helpful message if a pipeline with non-zero exit code causes the
# script to exit as described above.
#trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

# Exit immediately if a pipeline returns non-zero.
# Append "|| true" if you expect an error.
set -o errexit
# Allow the above trap be inherited by all functions in the script.
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace

# Set $IFS to only newline and tab.
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
IFS=$'\n\t'

###############################################################################
# Globals
###############################################################################
# Reset
readonly col_reset="\x1b[0m" # Text Reset

# Foreground color
readonly col_green="\x1b[32m"
readonly col_yellow="\x1b[33m"
readonly col_red="\x1b[31m"

# Special characters
readonly char_succ="✔"
readonly char_fail="✖"

execute() {
	printf "\n ⇒ %s ${@/eval/}"
	if
		("$@ ") &
		#("$@ >/dev/null 2>&1") &
		spinner "$!"
	then
		ok
	else
		error
	fi
}

spinner() {
	local i=0
	local sp="\|/-"
	local n=${#sp}
	while ps a | awk '{print $1}' | grep -q "${1}"; do
		sleep "0.75"
		printf "%s\b" "${sp:i++%n:1}"
	done
}
error() {
	printf "${col_red}${char_fail}${col_reset}"
}

ok() {
	printf "${col_green}${char_succ}${col_reset}"
}
###############################################################################
# Main script
###############################################################################
# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
printf "closing any system preferences to prevent issues with automated changes "
osascript -e 'tell application "System Preferences" to quit'
ok

###############################################################################
# System preferences -> General                                               #
###############################################################################

#TODO: Appearance
#execute eval "defaults write -g AppleInterfaceStyle -string \"Dark\""
#execute eval "defaults write -g AppleInterfaceStyleSwitchesAutomatically -int 1

# Accent colour
execute eval "defaults write -g AppleAccentColor -int -1" #Graphite

# Highlight colour
execute eval "defaults write -g AppleHighlightColor -string \"0.847059 0.847059 0.862745 Graphite\""

# Sidebar icon size
# Possible values: 1=small, 2=medium, 3=large
execute eval "defaults write -g NSTableViewDefaultSizeMode -int 2"

# Automatically show and hide menu bar
execute eval "defaults write -g _HIHideMenuBar -int 0"

# Show scroll bars
# Possible values: `WhenScrolling`, `Automatic` and `Always`
execute eval "defaults write -g AppleShowScrollBars -string \"Automatic\""

# Click in the scroll bar to: Jump to the spot that's clicked
execute eval "defaults write -g AppleScrollerPagingBehavior -int 1"

# Change default browser
# TODO: execute eval "defaults write -g NSPreferredWebServices
# Set DuckDuckGo as the search engine
# execute eval "defaults write -g NSPreferredWebServices {
# 	NSWebServicesProviderWebSearch = {
# 		NSDefaultDisplayName = DuckDuckGo;
# 		NSProviderIdentifier = 'com.duckduckgo';
# 	};
# }"

# Ask to keep changes when closing documents
execute eval "defaults write -g NSCloseAlwaysConfirmsChanges -int 1"

# Close windows when quitting an app
execute eval "defaults write -g NSQuitAlwaysKeepsWindows -int 0"

#TODO:  Recent items
#TODO: Allow Handoff between this Mac and your iCloud devices
#TODO: Use font smoothing when available, these dont work on catalina
# Re-enable subpixel antialiasing
#Use font smoothing when available
execute eval "defaults write -g CGFontRenderingFontSmoothingDisabled -int 0"

# Enable medium font smoothing subpixel font rendering on non-Apple LCDs
# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
execute eval "defaults write -g AppleFontSmoothing -int 2"

###############################################################################
# System preferences -> Desktop & Screen Saver                                #
###############################################################################

#screen savers
execute eval "defaults -currentHost write com.apple.screensaver moduleDict -dict moduleName \"Computer Name\" path \"/System/Library/Frameworks/ScreenSaver.framework/PlugIns/Computer Name.appex\" type 0"
execute eval "defaults -currentHost write com.apple.ScreenSaver.Computer-Name MESSAGE \"This MacBook Belongs to XX\""

#Start after
execute eval "defaults -currentHost write com.apple.screensaver idleTime -int 1200"

#Show with clock
execute eval "defaults -currentHost write com.apple.screensaver showClock -int 1"

###############################################################################
# System preferences -> Dock                                                  #
###############################################################################

# Size, Set the icon size of Dock items to 49 pixels
execute eval "defaults write com.apple.dock tilesize -int 49"

# Magnification
execute eval "defaults write com.apple.dock magnification -bool YES"

# Icon size of magnified Dock items
execute eval "defaults write com.apple.dock largesize -int 64"

#Minimise windows using
#execute eval "defaults write com.apple.dock mineffect -string "scale""

#Minimise windows into application icon
execute eval "defaults write com.apple.dock minimize-to-application -bool YES"

#Animate opening applications
#execute eval "defaults write com.apple.dock launchanim -bool NO"

#Automatically hide and show the Dock
#execute eval "defaults write com.apple.dock autohide -bool YES"

# Remove the auto-hiding Dock delay
#execute eval "defaults write com.apple.dock autohide-delay -float 0"

# Remove the animation when hiding/showing the Dock
#execute eval "defaults write com.apple.dock autohide-time-modifier -float 0"

#Show indicators for open applications
execute eval "defaults write com.apple.dock show-process-indicators -bool YES"

#Show recent applications in Dock
execute eval "defaults write com.apple.dock show-recents -bool YES"

# Show only open applications in the Dock
#execute eval "defaults write com.apple.dock static-only -bool YES"

# Enable highlight hover effect for the grid view of a stack (Dock)
execute eval "defaults write com.apple.dock mouse-over-hilite-stack -bool YES"

# Enable spring loading for all Dock items
execute eval "defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool YES"

# Make Dock icons of hidden applications translucent
execute eval "defaults write com.apple.dock showhidden -bool YES"

# Add a spacer to the left side of the Dock (where the applications are)
execute eval "defaults write com.apple.dock persistent-apps -array-add '{\"tile-type\"=\"spacer-tile\";}'"

# Add a spacer to the right side of the Dock (where the Trash is)
execute eval "defaults write com.apple.dock persistent-others -array-add '{\"tile-type\"=\"spacer-tile\";}'"

###############################################################################
# System preferences -> Mission Control                                       #
###############################################################################

# Automatically rearrange Spaces based on most recent use
execute eval "defaults write com.apple.dock mru-spaces -bool NO"

#When switching to an application, switch to a Space with open windows for the application

# Group windows by application
execute eval "defaults write com.apple.dock expose-group-by-app -int 0"

#Displays have separate Spaces
#Keyboard and Mouse Shortcuts

# Speed up Mission Control animations
execute eval "defaults write com.apple.dock expose-animation-duration -float 0.1"

###############################################################################
# System preferences -> Language & Region                                     #
###############################################################################

#Preferred languages
# Note: if you’re in the US, replace $(     EUR) with $(USD), $(Centimeters) with
# $(Inches), $(en_GB) with $(en_US), and $(true) with $(false).
execute eval "defaults write -g AppleLanguages -array 'en-SE'"
execute eval "defaults write -g AppleLocale -string 'en-SE'"

# Show language menu in the top right corner of the boot screen
execute eval "defaults write com.apple.loginwindow showInputMenu -int 0"

# Set the timezone; see $(sudo systemsetup -listtimezones) for other values
execute eval "systemsetup -settimezone 'Europe/Brussels' >/dev/null"

###############################################################################
# System preferences -> Security & Privacy                                    #
###############################################################################

#TODO: Don't sure this works
# Require password... after sleep or screen saver begins
execute eval "defaults write com.apple.screensaver askForPassword -int 1"
execute eval "defaults write com.apple.screensaver askForPasswordDelay -int 0"

#TODO: Don't sure this works
#Show a message when the screen is locked
execute eval "defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText -string \"This is a new message\""

# Turn On Firewall
execute eval "/usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on"

#Automatically allow built-in software to receive incoming connections
execute eval "/usr/libexec/ApplicationFirewall/socketfilterfw --setallowsigned off"
execute eval "/usr/libexec/ApplicationFirewall/socketfilterfw --setallowsignedapp off"

#Enable stealth mode
execute eval "/usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on"

# Enable Firewall logging
execute eval "/usr/libexec/ApplicationFirewall/socketfilterfw --setloggingmode on"

###############################################################################
# System preferences -> Software Update                                       #
###############################################################################

#Check for updates
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist AutomaticCheckEnabled -bool YES"

#Download new updates when available
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist AutomaticDownload -bool YES"

#Install macOS updates
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist AutomaticallyInstallMacOSUpdates -bool YES"
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist CriticalUpdateInstall -bool YES"

#Install app updates from the App Store
execute eval "defaults write /Library/Preferences/com.apple.commerce.plist AutoUpdate -bool YES"

#Install system data files and security updates
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist ConfigDataInstall -bool YES"

# Check for software updates daily, not just once per week
execute eval "defaults write /Library/Preferences/com.apple.SoftwareUpdate.plist ScheduleFrequency -int 1"

# Allow the App Store to reboot machine on macOS updates
execute eval "defaults write /Library/Preferences/com.apple.commerce.plist AutoUpdateRestartRequired -bool YES"

###############################################################################
# System preferences -> Network                                       #
###############################################################################

###############################################################################
# System preferences -> Bluetooth                                       #
###############################################################################

###############################################################################
# System preferences -> Sound                                       #
###############################################################################

# Increase sound quality for Bluetooth headphones/headsets
execute eval "defaults write com.apple.BluetoothAudioAgent 'Apple Bitpool Min (editable)' -int 40"

###############################################################################
# System preferences -> Keyboard                                       #
###############################################################################

# Disable press-and-hold for keys in favor of key repeat
execute eval "defaults write -g ApplePressAndHoldEnabled -bool NO"

#Key Repeat, Delay Until Repeat
execute eval "defaults write -g KeyRepeat -int 6"
execute eval "defaults write -g InitialKeyRepeat -int 25"

#Touch Bar shows
#appWithControlStrip, fullControlStrip
execute eval "defaults write com.apple.touchbar.agent PresentationModeGlobal appWithControlStrip"

#Customise Control Strip
execute eval "defaults write com.apple.controlstrip { MiniCustomized = (
  com.apple.system.brightness,
  com.apple.system.volume,
  com.apple.system.media-play-pause,
  com.apple.system.screen-lock
 ); }"

#Correct spelling automatically
execute eval "defaults write -g NSAutomaticSpellingCorrectionEnabled -bool NO"

#Capitalise words automatically
execute eval "defaults write -g NSAutomaticCapitalizationEnabled -bool NO"

#Add full stop with double-space
execute eval "defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool NO"

#Use smart quotes and dashes
execute eval "defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool NO"
execute eval "defaults write -g NSAutomaticDashSubstitutionEnabled -bool NO"

#use keyboard navigation to move focus between controls
execute eval "defaults write -g AppleKeyboardUIMode -int 3"

###############################################################################
# System preferences -> Trackpad                                       #
###############################################################################

#Look up & data detectors
execute eval "defaults -currentHost write -g com.apple.trackpad.threeFingerTapGesture -int 0"

#Tap to click
execute eval "defaults -currentHost write -g com.apple.mouse.tapBehavior -int 0"

#Scroll direction: Natural
execute eval "defaults -currentHost write -g com.apple.swipescrolldirection -int 0"

#Notification Centre
execute eval "defaults -currentHost write -g com.apple.trackpad.twoFingerFromRightEdgeSwipeGesture -int 0"

###############################################################################
# System preferences -> Displays                                       #
###############################################################################

#Resolution
#TODO:

# Enable HiDPI display modes (requires restart)
execute eval "defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES"

###############################################################################
# System preferences -> Energy Saver                                          #
###############################################################################


###############################################################################
# System preferences -> Time Machine                                          #
###############################################################################

# Prevent Time Machine from prompting to use new hard drives as backup volume
execute eval "defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool YES"

# Disable local Time Machine backups
#hash tmutil &> /dev/null && sudo tmutil disablelocal

###############################################################################
# Finder                                                                      #
###############################################################################

# Show these items on the desktop
execute eval "defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool NO"
execute eval "defaults write com.apple.finder ShowHardDrivesOnDesktop -bool NO"
execute eval "defaults write com.apple.finder ShowMountedServersOnDesktop -bool NO"
execute eval "defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool NO"

# New Finder windows show
# For other paths, use $(PfLo) and $(file:///full/path/here/)
execute eval "defaults write com.apple.finder NewWindowTarget -string 'PfDe'"
execute eval "defaults write com.apple.finder NewWindowTargetPath -string 'file://${HOME}/Desktop/'"

# Recent tags
execute eval "defaults write com.apple.finder ShowRecentTags -bool NO"

# Show all filename extensions
execute eval "defaults write -g AppleShowAllExtensions -bool YES"

# Show warning before changing a extension
execute eval "defaults write com.apple.finder FXEnableExtensionChangeWarning -bool YES"

# Show warning before removing from iCloud Drive
execute eval "defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool YES"

# Show warning before emptying the Trash
execute eval "defaults write com.apple.finder WarnOnEmptyTrash -bool YES"

# Empty Trash securely by default
execute eval "defaults write com.apple.finder EmptyTrashSecurely -bool YES"

# Remove itoms from the Bin after 30 days
execute eval "defaults write com.apple.finder FXRemoveOldTrashItems -bool YES"

# Keep folders on top
execute eval "defaults write com.apple.finder _FXSortFoldersFirst -bool YES"

# When performing a search, search the current folder by default
execute eval "defaults write com.apple.finder FXDefaultSearchScope -string 'SCcf'"

# as list view in all Finder windows by default
# Four-letter codes for the other view modes: $(icnv), $(clmv), $(glyv)
execute eval "defaults write com.apple.finder FXPreferredViewStyle -string 'Nlsv'"

# Show status bar
execute eval "defaults write com.apple.finder ShowStatusBar -bool YES"

# Show path bar
execute eval "defaults write com.apple.finder ShowPathbar -bool YES"

# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
execute eval "defaults write com.apple.finder QuitMenuItem -bool YES"

# Finder: disable window animations and Get Info animations
execute eval "defaults write com.apple.finder DisableAllAnimations -bool YES"

# Finder: show hidden files by default
execute eval "defaults write com.apple.finder AppleShowAllFiles -bool YES"

# Display full POSIX path as Finder window title
execute eval "defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES"

# Enable spring loading for directories
execute eval "defaults write -g com.apple.springing.enabled -bool YES"

# Remove the spring loading delay for directories
execute eval "defaults write -g com.apple.springing.delay -float 0.2"

# Avoid creating .DS_Store files on network or USB volumes
execute eval "defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool YES"
execute eval "defaults write com.apple.desktopservices DSDontWriteUSBStores -bool YES"

# Disable disk image verification
#execute eval "defaults write com.apple.frameworks.diskimages skip-verify -bool YES"
#execute eval "defaults write com.apple.frameworks.diskimages skip-verify-locked -bool YES"
#execute eval "defaults write com.apple.frameworks.diskimages skip-verify-remote -bool YES"

# Automatically open a new Finder window when a volume is mounted
#execute eval "defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool YES"
#execute eval "defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool YES"
#execute eval "defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool YES"

# Show item info near icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist

# Show item info to the right of the icons on the desktop
/usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist

# Enable snap-to-grid for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

# Increase grid spacing for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist

# Increase the size of icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist

# Enable AirDrop over Ethernet and on unsupported Macs running Lion
execute eval "defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool YES"

# Show the ~/Library folder
execute eval "chflags nohidden ~/Library"

# Show the /Volumes folder
execute eval "chflags nohidden /Volumes"

# Remove Dropbox’s green checkmark icons in Finder
#file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
#[ -e "${file}" ] && mv -f "${file}" "${file}.bak"

# Expand the following File Info panes:
# “General”, “Open with”, and “Sharing & Permissions”
execute eval "defaults write com.apple.finder FXInfoPanesExpanded -dict \
	General -bool YES \
	OpenWith -bool YES \
	Privileges -bool YES"

# Expand save panel by default
execute eval "defaults write -g NSNavPanelExpandedStateForSaveMode -bool YES"
execute eval "defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool YES"

# Expand print panel by default
execute eval "defaults write -g PMPrintingExpandedStateForPrint -bool YES"
execute eval "defaults write -g PMPrintingExpandedStateForPrint2 -bool YES"

# Save to disk (not to iCloud) by default
execute eval "defaults write -g NSDocumentSaveNewDocumentsToCloud -bool NO"

# Automatically quit printer app once the print jobs complete
execute eval "defaults write com.apple.print.PrintingPrefs 'Quit When Finished' -bool YES"

# Disable the “Are you sure you want to open this application?” dialog
execute eval "defaults write com.apple.LaunchServices LSQuarantine -bool NO"

# Display ASCII control characters using caret notation in standard text views
# Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
execute eval "defaults write -g NSTextShowsControlCharacters -bool YES"

###############################################################################
# Safari & WebKit                                                             #
###############################################################################

# Privacy: don’t send search queries to Apple
execute eval "defaults write com.apple.Safari UniversalSearchEnabled -bool NO"
execute eval "defaults write com.apple.Safari SuppressSearchSuggestions -bool YES"

# Press Tab to highlight each item on a web page
execute eval "defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool YES"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool YES"

# Show the full URL in the address bar (note: this still hides the scheme)
execute eval "defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool YES"

# Set Safari’s home page to `about:blank` for faster loading
execute eval "defaults write com.apple.Safari HomePage -string 'about:blank'"

# Prevent Safari from opening ‘safe’ files automatically after downloading
execute eval "defaults write com.apple.Safari AutoOpenSafeDownloads -bool NO"

# Allow hitting the Backspace key to go to the previous page in history
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool YES"

# Hide Safari’s bookmarks bar by default
execute eval "defaults write com.apple.Safari ShowFavoritesBar -bool NO"

# Hide Safari’s sidebar in Top Sites
execute eval "defaults write com.apple.Safari ShowSidebarInTopSites -bool NO"

# Disable Safari’s thumbnail cache for History and Top Sites
execute eval "defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2"

# Enable Safari’s debug menu
execute eval "defaults write com.apple.Safari IncludeInternalDebugMenu -bool YES"

# Make Safari’s search banners default to Contains instead of Starts With
execute eval "defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool NO"

# Remove useless icons from Safari’s bookmarks bar
execute eval "defaults write com.apple.Safari ProxiesInBookmarksBar '()'"

# Enable the Develop menu and the Web Inspector in Safari
execute eval "defaults write com.apple.Safari IncludeDevelopMenu -bool YES"
execute eval "defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool YES"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool YES"

# Add a context menu item for showing the Web Inspector in web views
execute eval "defaults write -g WebKitDeveloperExtras -bool YES"

# Enable continuous spellchecking
execute eval "defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool YES"
# Disable auto-correct
execute eval "defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool NO"

# Disable AutoFill
execute eval "defaults write com.apple.Safari AutoFillFromAddressBook -bool NO"
execute eval "defaults write com.apple.Safari AutoFillPasswords -bool NO"
execute eval "defaults write com.apple.Safari AutoFillCreditCardData -bool NO"
execute eval "defaults write com.apple.Safari AutoFillMiscellaneousForms -bool NO"

# Warn about fraudulent websites
execute eval "defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool YES"

# Disable plug-ins
execute eval "defaults write com.apple.Safari WebKitPluginsEnabled -bool NO"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool NO"

# Disable Java
execute eval "defaults write com.apple.Safari WebKitJavaEnabled -bool NO"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool NO"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool NO"

# Block pop-up windows
execute eval "defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool NO"
execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool NO"

# Disable auto-playing video
#execute eval "defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool NO"
#execute eval "defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool NO"
#execute eval "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool NO"
#execute eval "defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool NO"

# Enable “Do Not Track”
execute eval "defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool YES"

# Update extensions automatically
execute eval "defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool YES"

# Customise Safari toolbar items
#TODO:
# execute eval "defaults write com.apple.safari "NSToolbar Configuration BrowserToolbarIdentifier-v2" {
#   "TB Default Item Identifiers" =     (
#     BackForwardToolbarIdentifier,
#     SidebarToolbarIdentifier,
#     NSToolbarFlexibleSpaceItem,
#     "com.el1t.uBlock-3NU33NW2M3 toolbarItem",
#     InputFieldsToolbarIdentifier,
#     NSToolbarFlexibleSpaceItem,
#     ShareToolbarIdentifier,
#     TabPickerToolbarIdentifier
#   );
#   "TB Display Mode" = 2;
#   "TB Icon Size Mode" = 1;
#   "TB Is Shown" = 1;
#   "TB Item Identifiers" =     (
#     NSToolbarFlexibleSpaceItem,
#     InputFieldsToolbarIdentifier,
#     NSToolbarFlexibleSpaceItem,
#     ShareToolbarIdentifier
#   );
#   "TB Size Mode" = 1;
# }"

###############################################################################
# Mail                                                                        #
###############################################################################

# Disable send and reply animations in Mail.app
execute eval "defaults write com.apple.mail DisableReplyAnimations -bool YES"
execute eval "defaults write com.apple.mail DisableSendAnimations -bool YES"

# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
execute eval "defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool NO"

# Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
execute eval "defaults write com.apple.mail NSUserKeyEquivalents -dict-add 'Send' -string @\U21a9"

# Display emails in threaded mode, sorted by date (oldest at the top)
execute eval "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'DisplayInThreadedMode' -string 'yes'"
execute eval "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortedDescending' -string 'yes'"
execute eval "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortOrder' -string 'received-date'"

# Disable inline attachments (just show the icons)
execute eval "defaults write com.apple.mail DisableInlineAttachmentViewing -bool YES"

# Disable automatic spell checking
execute eval "defaults write com.apple.mail SpellCheckingBehavior -string 'NoSpellCheckingEnabled'"

###############################################################################
# Spotlight                                                                   #
###############################################################################

# Hide Spotlight tray-icon (and subsequent helper)
#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
# Disable Spotlight indexing for any volume that gets mounted and has not yet
# been indexed before.
# Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
#sudo execute eval "defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
# Change indexing order and disable some search results
# Yosemite-specific search results (remove them if you are using macOS 10.9 or older):
# 	MENU_DEFINITION
# 	MENU_CONVERSION
# 	MENU_EXPRESSION
# 	MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
# 	MENU_WEBSEARCH             (send search queries to Apple)
# 	MENU_OTHER
# execute eval "defaults write com.apple.spotlight orderedItems -array \
# 	{"enabled" = 1
# "name"                  = "APPLICATIONS"
# }'
# 	'{"enabled" = 1
# "name"                  = "SYSTEM_PREFS"
# }' \
# 	'{"enabled" = 1
# "name"                  = "DIRECTORIES"
# }' \
# 	'{"enabled" = 1
# "name"                  = "PDF"
# }' \
# 	'{"enabled" = 1
# "name"                  = "FONTS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "DOCUMENTS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MESSAGES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "CONTACT"
# }' \
# 	'{"enabled" = 0
# "name"                  = "EVENT_TODO"
# }' \
# 	'{"enabled" = 0
# "name"                  = "IMAGES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "BOOKMARKS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MUSIC"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MOVIES"
# }' \
# 	'{"enabled" = 0
# "name"                  = "PRESENTATIONS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "SPREADSHEETS"
# }' \
# 	'{"enabled" = 0
# "name"                  = "SOURCE"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_DEFINITION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_OTHER"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_CONVERSION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_EXPRESSION"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_WEBSEARCH"
# }' \
# 	'{"enabled" = 0
# "name"                  = "MENU_SPOTLIGHT_SUGGESTIONS"
# }"
# Load new settings before rebuilding the index
killall mds >/dev/null  2>&1
# Make sure indexing is enabled for the main volume
sudo mdutil -i on / >/dev/null
# Rebuild the index from scratch
sudo mdutil -E / >/dev/null

###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################

# Only use UTF-8 in Terminal.app
execute eval "defaults write com.apple.terminal StringEncodings -array 4"

# Use a modified version of the Solarized Dark theme by default in Terminal.app
# osascript <<EOD
#
# tell application "Terminal"
#
# 	local allOpenedWindows
# 	local initialOpenedWindows
# 	local windowID
# 	set themeName to "Solarized Dark xterm-256color"
#
# 	(* Store the IDs of all the open terminal windows. *)
# 	set initialOpenedWindows to id of every window
#
# 	(* Open the custom theme so that it gets added to the list
# 	   of available terminal themes (note: this will open two
# 	   additional terminal windows). *)
# 	do shell script "open '$HOME/init/" & themeName & ".terminal'"
#
# 	(* Wait a little bit to ensure that the custom theme is added. *)
# 	delay 1
#
# 	(* Set the custom theme as the default terminal theme. *)
# 	set default settings to settings set themeName
#
# 	(* Get the IDs of all the currently opened terminal windows. *)
# 	set allOpenedWindows to id of every window
#
# 	repeat with windowID in allOpenedWindows
#
# 		(* Close the additional windows that were opened in order
# 		   to add the custom theme to the list of terminal themes. *)
# 		if initialOpenedWindows does not contain windowID then
# 			close (every window whose id is windowID)
#
# 		(* Change the theme for the initial opened terminal windows
# 		   to remove the need to close them in order for the custom
# 		   theme to be applied. *)
# 		else
# 			set current settings of tabs of (every window whose id is windowID) to settings set themeName
# 		end if
#
# 	end repeat
#
# end tell
#
# EOD

# Enable “focus follows mouse” for Terminal.app and all X11 apps
# i.e. hover over a window and start typing in it without clicking first
#execute eval "defaults write com.apple.terminal FocusFollowsMouse -bool YES"
#execute eval "defaults write org.x.X11 wm_ffm -bool YES"

# Enable Secure Keyboard Entry in Terminal.app
# See: https://security.stackexchange.com/a/47786/8918
execute eval "defaults write com.apple.terminal SecureKeyboardEntry -bool YES"

# Disable the annoying line marks
execute eval "defaults write com.apple.Terminal ShowLineMarks -int 0"

# Install the Solarized Dark theme for iTerm
#TODO: open "${HOME}/init/Solarized Dark.itermcolors"

# Don’t display the annoying prompt when quitting iTerm
#execute eval "defaults write com.googlecode.iterm2 PromptOnQuit -bool NO"

###############################################################################
# Activity Monitor                                                            #
###############################################################################

# Show the main window when launching Activity Monitor
execute eval "defaults write com.apple.ActivityMonitor OpenMainWindow -bool YES"

# Visualize CPU usage in the Activity Monitor Dock icon
execute eval "defaults write com.apple.ActivityMonitor IconType -int 5"

# Show all processes in Activity Monitor
execute eval "defaults write com.apple.ActivityMonitor ShowCategory -int 0"

# Set sort column
execute eval "defaults write com.apple.ActivityMonitor UserColumnSortPerTab -dict \
	'0' { direction = 0
sort                        = CPUUsage
}' \
	'1' '{ direction = 0
sort                        = ResidentSize
}' \
	'2' '{ direction = 0
sort                        = 12HRPower
}' \
	'3' '{ direction = 0
sort                        = bytesWritten
}' \
	'4' '{ direction = 0
sort                        = rxBytes
}"
execute eval "defaults write com.apple.ActivityMonitor SortDirection -int 0"

# Show Data in the Disk graph (instead of IO)
execute eval "defaults write com.apple.ActivityMonitor DiskGraphType -int 1"

# Show Data in the Network graph (instead of packets)
execute eval "defaults write com.apple.ActivityMonitor NetworkGraphType -int 1"

###############################################################################
# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #
###############################################################################

# Enable the debug menu in Address Book
execute eval "defaults write com.apple.addressbook ABShowDebugMenu -bool YES"

# Enable Dashboard dev mode (allows keeping widgets on the desktop)
execute eval "defaults write com.apple.dashboard devmode -bool YES"

# Enable the debug menu in iCal (pre-10.8)
execute eval "defaults write com.apple.iCal IncludeDebugMenu -bool YES"

# Use plain text mode for new TextEdit documents
execute eval "defaults write com.apple.TextEdit RichText -int 0"
# Open and save files as UTF-8 in TextEdit
execute eval "defaults write com.apple.TextEdit PlainTextEncoding -int 4"
execute eval "defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4"

# Enable the debug menu in Disk Utility
execute eval "defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool YES"
execute eval "defaults write com.apple.DiskUtility advanced-image-options -bool YES"

# Auto-play videos when opened with QuickTime Player
execute eval "defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool YES"

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
execute eval "defaults write com.apple.appstore WebKitDeveloperExtras -bool YES"

# Enable Debug Menu in the Mac App Store
execute eval "defaults write com.apple.appstore ShowDebugMenu -bool YES"

# Automatically download apps purchased on other Macs
#execute eval "defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1"


###############################################################################
# Photos                                                                      #
###############################################################################

# Prevent Photos from opening automatically when devices are plugged in
execute eval "defaults write com.apple.ImageCapture disableHotPlug -bool YES"

###############################################################################
# Messages                                                                    #
###############################################################################

# Disable automatic emoji substitution (i.e. use plain text smileys)
execute eval "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'automaticEmojiSubstitutionEnablediMessage' -bool NO"

# Disable smart quotes as it’s annoying for messages that contain code
execute eval "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'automaticQuoteSubstitutionEnabled' -bool NO"

# Disable continuous spell checking
execute eval "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'continuousSpellCheckingEnabled' -bool NO"

###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################

# Allow installing user scripts via GitHub Gist or Userscripts.org
execute eval "defaults write com.google.Chrome ExtensionInstallSources -array 'https://gist.githubusercontent.com/' 'http://userscripts.org/*'"
execute eval "defaults write com.google.Chrome.canary ExtensionInstallSources -array 'https://gist.githubusercontent.com/' 'http://userscripts.org/*'"

# Disable the all too sensitive backswipe on trackpads
execute eval "defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool NO"
execute eval "defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool NO"

# Disable the all too sensitive backswipe on Magic Mouse
execute eval "defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool NO"
execute eval "defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool NO"

# Use the system-native print preview dialog
execute eval "defaults write com.google.Chrome DisablePrintPreview -bool YES"
execute eval "defaults write com.google.Chrome.canary DisablePrintPreview -bool YES"

# Expand the print dialog by default
execute eval "defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool YES"
execute eval "defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool YES"

###############################################################################
# GPGMail 2                                                                   #
###############################################################################

# Disable signing emails by default
execute eval "defaults write ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault -bool NO"

###############################################################################
# Opera & Opera Developer                                                     #
###############################################################################

# Expand the print dialog by default
execute eval "defaults write com.operasoftware.Opera PMPrintingExpandedStateForPrint2 -boolean true"
execute eval "defaults write com.operasoftware.OperaDeveloper PMPrintingExpandedStateForPrint2 -boolean true"

###############################################################################
# Transmission.app                                                            #
###############################################################################

# Use `~/Documents/Torrents` to store incomplete downloads
execute eval "defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool YES"
execute eval "defaults write org.m0k.transmission IncompleteDownloadFolder -string ${HOME}/Documents/Torrents"

# Use `~/Downloads` to store completed downloads
execute eval "defaults write org.m0k.transmission DownloadLocationConstant -bool YES"

# Don’t prompt for confirmation before downloading
execute eval "defaults write org.m0k.transmission DownloadAsk -bool NO"
execute eval "defaults write org.m0k.transmission MagnetOpenAsk -bool NO"

# Don’t prompt for confirmation before removing non-downloading active transfers
execute eval "defaults write org.m0k.transmission CheckRemoveDownloading -bool YES"

# Trash original torrent files
execute eval "defaults write org.m0k.transmission DeleteOriginalTorrent -bool YES"

# Hide the donate message
execute eval "defaults write org.m0k.transmission WarningDonate -bool NO"
# Hide the legal disclaimer
execute eval "defaults write org.m0k.transmission WarningLegal -bool NO"

# IP block list.
# Source: https://giuliomac.wordpress.com/2014/02/19/best-blocklist-for-transmission/
execute eval "defaults write org.m0k.transmission BlocklistNew -bool YES"
execute eval "defaults write org.m0k.transmission BlocklistURL -string 'http://john.bitsurge.net/public/biglist.p2p.gz'"
execute eval "defaults write org.m0k.transmission BlocklistAutoUpdate -bool YES"

# Randomize port on launch
execute eval "defaults write org.m0k.transmission RandomPort -bool YES"

###############################################################################
# Twitter.app                                                                 #
###############################################################################

# Disable smart quotes as it’s annoying for code tweets
execute eval "defaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool NO"

# Show the app window when clicking the menu bar icon
execute eval "defaults write com.twitter.twitter-mac MenuItemBehavior -int 1"

# Enable the hidden ‘Develop’ menu
execute eval "defaults write com.twitter.twitter-mac ShowDevelopMenu -bool YES"

# Open links in the background
execute eval "defaults write com.twitter.twitter-mac openLinksInBackground -bool YES"

# Allow closing the ‘new tweet’ window by pressing `Esc`
execute eval "defaults write com.twitter.twitter-mac ESCClosesComposeWindow -bool YES"

# Show full names rather than Twitter handles
execute eval "defaults write com.twitter.twitter-mac ShowFullNames -bool YES"

# Hide the app in the background if it’s not the front-most window
execute eval "defaults write com.twitter.twitter-mac HideInBackground -bool YES"

###############################################################################
# Tweetbot.app                                                                #
###############################################################################

# Bypass the annoyingly slow t.co URL shortener
execute eval "defaults write com.tapbots.TweetbotMac OpenURLsDirectly -bool YES"

###############################################################################
# Flycut.app                                                                  #
###############################################################################

execute eval "defaults write com.generalarcade.flycut menuIcon 3"
execute eval "defaults write com.generalarcade.flycut loadOnStartup -bool YES"
execute eval "defaults write com.generalarcade.flycut rememberNum -int 60"
execute eval "defaults write com.generalarcade.flycut pasteMovesToTop -bool YES"
execute eval "defaults write com.generalarcade.flycut removeDuplicates -bool YES"

###############################################################################
# Spotify.app
# thinks it's super important and should always be started on login. Fuck that.                                                                #
###############################################################################

mkdir -p ~/Library/Application\ Support/Spotify
touch ~/Library/Application\ Support/Spotify/prefs
echo 'app.autostart-mode="off"' >>~/Library/Application\ Support/Spotify/prefs
echo 'app.autostart-banner-seen=true' >>~/Library/Application\ Support/Spotify/prefs

###############################################################################
# VMware Fusion.app                                                                  #
###############################################################################
                                                     #
execute eval "defaults write com.vmware.fusion showStartMenu3 -bool NO"

# ###########################################################
# /etc/hosts -- spyware/ad blocking
# ###########################################################

# action   "cp /etc/hosts /etc/hosts.backup"
# sudo   cp /etc/hosts /etc/hosts.backup
# ok
# action   "cp ./configs/hosts /etc/hosts"
# sudo   cp ./configs/hosts /etc/hosts
# ok
# echo   -h "Your /etc/hosts file has been updated. Last version is saved in /etc/hosts.backup"

###############################################################################
# Kill affected applications                                                  #
###############################################################################

# Need to restart for several changes to take effect. Trackpad settings in particular.
printf "Doing a soft restart of affected apps. You should restart when everything is finished."

for app in "Activity Monitor" \
	"Address Book" \
	"Calendar" \
	"cfprefsd" \
	"Contacts" \
	"ControlStrip" \
	"Dock" \
	"Finder" \
	"Google Chrome Canary" \
	"Google Chrome" \
	"Mail" \
	"Messages" \
	"Opera" \
	"Photos" \
	"Safari" \
	"SizeUp" \
	"Spectacle" \
	"SystemUIServer" \
	"TextEdit" \
	"Transmission" \
	"Tweetbot" \
	"Twitter" \
	"iCal"; do
	killall "${app}" &>/dev/null
done
printf "Done. Note that some of these changes require a logout/restart to take effect."
