#!/usr/bin/env bash

#  ---------------------------------------------------------------------------
#
#  Description:  This file holds all my aliases
#
#  Sections:
#  1.  File and Folder Management
#  2.  Searching
#  3.  Process Management
#  4.  Networking
#  5.  System Operations & Information
#  6.  Web Development
#  7.  Man pages
#
#  ---------------------------------------------------------------------------

#   -----------------------------
#   1. FILE AND FOLDER MANAGEMENT
#   -----------------------------

#   Create a new directory and enter it
#   ---------------------------------------------------------
	function mkd() {
		mkdir -p "$@" && cd "$_";
	}

#   Change working directory to the top-most Finder window location
#   ---------------------------------------------------------
	function cdf() { # short for `cdfinder`
		cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
	}


#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
#     cdf () {
#         currFolderPath=$( /usr/bin/osascript <<EOT
#             tell application "Finder"
#                 try
#             set currFolder to (folder of the front window as alias)
#                 on error
#             set currFolder to (path to desktop folder as alias)
#                 end try
#                 POSIX path of currFolder
#             end tell
# EOT
#         )
#         echo "cd to \"$currFolderPath\""
#         cd "$currFolderPath"
#     }
    
#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
	function extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }

#   Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
#   ---------------------------------------------------------
	function targz() {
		local tmpFile="${@%/}.tar";
		tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

		size=$(
			stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
			stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
		);

		local cmd="";
		if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
			# the .tar file is smaller than 50 MB and Zopfli is available; use it
			cmd="zopfli";
		else
			if hash pigz 2> /dev/null; then
				cmd="pigz";
			else
				cmd="gzip";
			fi;
		fi;

		echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
		"${cmd}" -v "${tmpFile}" || return 1;
		[ -f "${tmpFile}" ] && rm "${tmpFile}";

		zippedSize=$(
			stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
			stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
		);

		echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
	}

#   Compare original and gzipped file size
#   ---------------------------------------------------------
	function gz() {
		local origsize=$(wc -c < "$1");
		local gzipsize=$(gzip -c "$1" | wc -c);
		local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
		printf "orig: %d bytes\n" "$origsize";
		printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
	}

#   Determine size of a file or total size of a directory
#   ---------------------------------------------------------
	function fs() {
		if du -b /dev/null > /dev/null 2>&1; then
			local arg=-sbh;
		else
			local arg=-sh;
		fi
		if [[ -n "$@" ]]; then
			du $arg -- "$@";
		else
			du $arg .[^.]* ./*;
		fi;
	}



#   -----------------------------
#   2. SEARCHING
#   -----------------------------

	ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
	ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
	ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

	#   spotlight: Search for a file using MacOS Spotlight's metadata
	#   -----------------------------------------------------------
    spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


#   -----------------------------
#  	3.  PROCESS MANAGEMENT
#   -----------------------------


	#   findPid: find out the pid of a specified process
	#   -----------------------------------------------------
	#       Note that the command name can be specified via a regex
	#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
	#       Without the 'sudo' it will only find processes of the current user
	#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }

	#   my_ps: List processes owned by my user:
	#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


	#   ii:  display useful host related informaton
	#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }



#   -----------------------------
#   4.  NETWORKING
#   -----------------------------

	#   Run `dig` and display the most useful info
	#   ---------------------------------------------------------
	function digga() {
		dig +nocmd "$1" any +multiline +noall +answer;
	}

	#   Show all the names (CNs and SANs) listed in the SSL certificate
	#   for a given domain
	#   ---------------------------------------------------------
	function getcertnames() {
		if [ -z "${1}" ]; then
			echo "ERROR: No domain specified.";
			return 1;
		fi;

		local domain="${1}";
		echo "Testing ${domain}â€¦";
		echo ""; # newline

		local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
			| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

		if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
			local certText=$(echo "${tmp}" \
				| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
				no_serial, no_sigdump, no_signame, no_validity, no_version");
			echo "Common Name:";
			echo ""; # newline
			echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
			echo ""; # newline
			echo "Subject Alternative Name(s):";
			echo ""; # newline
			echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
				| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
			return 0;
		else
			echo "ERROR: Certificate not found.";
			return 1;
		fi;
	}
	
	# whois a domain or a URL
	function whois() {
		local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
		if [ -z $domain ] ; then
			domain=$1
		fi
		echo "Getting whois record for: $domain â€¦"

		# avoid recursion
						# this is the best whois server
														# strip extra fluff
		/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
	}
	
	function localip(){
		function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
		export -f _localip
		local purple="\x1B\[35m" reset="\x1B\[m"
		networksetup -listallhardwareports | \
			sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
			sed -r "s/Device: (en.*)$/_localip \1/e" | \
			sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
			sed -r "s/(VLAN Configurations)|==*//g"
	}
	
#   -----------------------------
#   5.  SYSTEM OPERATIONS & INFORMATION
#   -----------------------------

	#   Normalize `open` across Linux, macOS, and Windows.
	#   This is needed to make the `o` function (see below) cross-platform.
	#   ---------------------------------------------------------
	if [ ! $(uname -s) = 'Darwin' ]; then
		if grep -q Microsoft /proc/version; then
			# Ubuntu on Windows using the Linux subsystem
			alias open='explorer.exe';
		else
			alias open='xdg-open';
		fi
	fi

	#   `o` with no arguments opens the current directory, otherwise opens the given
	#   location
	#   ---------------------------------------------------------
	function o() {
		if [ $# -eq 0 ]; then
			open .;
		else
			open "$@";
		fi;
	}

	#   `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
	#   the `.git` directory, listing directories first. The output gets piped into
	#   `less` with options to preserve color and line numbers, unless the output is
	#   small enough for one screen.
	#   ---------------------------------------------------------
	function tre() {
		tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
	}
	
	# Detect which `ls` flavor is in use
	#if ls --color > /dev/null 2>&1; then # GNU `ls`
	#	colorflag="--color"
	#	export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
	#else # macOS `ls`
	#	colorflag="-G"
	#	export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
	#fi
	
	
	# who is using the laptop's iSight camera?
	camerausedby() {
		echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
		usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
		echo -e "Recent camera uses:\n$usedby"
	}


#   ---------------------------------------
#   6. WEB DEVELOPMENT
#   ---------------------------------------
	
	#   Create a data URL from a file
	#   ---------------------------------------------------------
	function dataurl() {
		local mimeType=$(file -b --mime-type "$1");
		if [[ $mimeType == text/* ]]; then
			mimeType="${mimeType};charset=utf-8";
		fi
		echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
	}

	#   Start an HTTP server from a directory, optionally specifying the port
	#   ---------------------------------------------------------
	function server() {
		local port="${1:-8000}";
		sleep 1 && open "http://localhost:${port}/" &
		# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
		# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
	}

	#   Start a PHP server from a directory, optionally specifying the port
	#   (Requires PHP 5.4.0+.)
	#   ---------------------------------------------------------
	function phpserver() {
		local port="${1:-4000}";
		local ip=$(ipconfig getifaddr en1);
		sleep 1 && open "http://${ip}:${port}/" &
		php -S "${ip}:${port}";
	}
	
	httpHeaders () { /usr/bin/curl -I -L $@ ; }             # httpHeaders:      Grabs headers from web page

		#   httpDebug:  Download a web page and show info on what took time
		#   -------------------------------------------------------------------
		httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }

		# JavaScriptCore REPL
		jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
		[ -e "${jscbin}" ] && alias jsc="${jscbin}";
		unset jscbin;
	
		# One of @janmoesenâ€™s ProTipâ„¢s
	for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
		alias "${method}"="lwp-request -m '${method}'"
	done

	#   Use Gitâ€™s colored diff when available
	#   ---------------------------------------------------------
	hash git &>/dev/null;
	if [ $? -eq 0 ]; then
		function diff() {
			git diff --no-index --color-words "$@";
		}
	fi;

	
#   ---------------------------------------
#   7. MAN PAGES
#   ---------------------------------------
# man commands
# http://scriptingosx.com/2017/04/on-viewing-man-pages/

	function preman() {
		man -t $@ | open -f -a "Preview"
	}

	function xmanpage() {
		open x-man-page://$@
	}

	function bbman () {
	  MANWIDTH=80 MANPAGER='col -bx' man $@ | bbedit --clean --view-top -t "man $@"
	}


	
