#!/usr/bin/env bash
# shellcheck shell=bash disable=SC2155

# 1. MAKE TERMINAL BETTER
# 2. FILE AND FOLDER MANAGEMENT
# 3. SEARCHING
# 4. PROCESS MANAGEMENT
# 5. NETWORKING
# 6. SYSTEMS OPERATIONS & INFORMATION
# 7. WEB DEVELOPMENT
# 8. MAN PAGES

# Check for MacOS
is_mac() {
	[ "$(uname)" = "Darwin" ]
}

# ---[ 1. MAKE TERMINAL BETTER ]------------------------------------------------

# Function to reset the terminal's scroll-back buffer.
# It prompts the user for confirmation before resetting.
resetScrollBack() {
	# Prompt user for confirmation
	printf "Do you want to reset scroll-back (y/N)? "
	read -r answer
	clear

	# Check if the answer starts with "y" or "Y"
	if [ "$answer" != "${answer#[Yy]}" ]; then
		printf '\e[3J' # Send escape sequence to clear scroll-back buffer
	fi
}

# Get the current branch in a git repo
parse_git_branch() {
  # Check if git command is available
  command -v git >/dev/null 2>&1 || return

  # Check if current directory is a git repository
  git rev-parse --is-inside-work-tree >/dev/null 2>&1 || return

  local branch
  branch="$(git symbolic-ref --short -q HEAD)"
  
  [[ -n "$branch" ]] && echo "[${branch}$(parse_git_dirty)]"
}

# Get the current status of the git repo
parse_git_dirty() {
  local status
  status=$(git status --porcelain 2>/dev/null)
  local bits=""

  # Various git status indicators using grep -q for efficiency
  echo "$status" | grep -q '^R' && bits=">${bits}"
  echo "$status" | grep -q '^ M' && bits="!${bits}"
  echo "$status" | grep -q '^M' && bits="*${bits}"
  echo "$status" | grep -q '^??' && bits="?${bits}"
  echo "$status" | grep -q '^ D' && bits="x${bits}"
  echo "$status" | grep -q '^D' && bits="+${bits}"

  [[ -n "$bits" ]] && echo " ${bits}"
}

# ---[ 2. FILE AND FOLDER MANAGEMENT ]------------------------------------------

# Create a zero-filled file of a given size.
# Usage: makefile <size> <filename>
makefile() {
	local size="$1"
	local filename="$2"
	if command -v mkfile >/dev/null; then
		mkfile "$size" "$filename"
	else
		dd if=/dev/zero of="$filename" bs="$size" count=1
	fi
}

# Create a directory and navigate into it.
# Usage: mkd <directory_name>
mkd() {
	mkdir -p "$@" && cd "$_" || return
}

# Extract various archive formats.
# Usage: extract <filename>
extract() {
	if [[ -f "$1" ]]; then
		case $1 in
		*.tar.bz2) tar xjf "$1" ;;
		*.tar.gz) tar xzf "$1" ;;
		*.bz2) bunzip2 "$1" ;;
		*.rar) unrar e "$1" ;;
		*.gz) gunzip "$1" ;;
		*.tar) tar xf "$1" ;;
		*.tbz2) tar xjf "$1" ;;
		*.tgz) tar xzf "$1" ;;
		*.zip) unzip "$1" ;;
		*.Z) uncompress "$1" ;;
		*.7z) 7z x "$1" ;;
		*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Create a .tar.gz archive using various compression tools, if available.
# Prioritizes zopfli for smaller files and pigz for parallel processing.
# Usage: targz <filename(s)>
targz() {
	local tmpFile="${*%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	local size=$(stat -f"%z" "${tmpFile}" 2>/dev/null || stat -c"%s" "${tmpFile}" 2>/dev/null)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	local zippedSize=$(stat -f"%z" "${tmpFile}.gz" 2>/dev/null || stat -c"%s" "${tmpFile}.gz" 2>/dev/null)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Compare the size of an original and its gzipped version.
# Usage: gz <filename>
gz() {
	local origsize=$(wc -c <"$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Determine the size of a file or the total size of a directory.
# Usage: fs <filename_or_directory>
fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$*" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# ---[ 3. SEARCHING ------------------------------------------------------------

# Finds a file under the current directory with an exact name match.
ff() { /usr/bin/find . -name "$1"; }

# Finds files under the current directory starting with the given string.
ffs() { /usr/bin/find . -name "$1*"; }

# Finds files under the current directory ending with the given string.
ffe() { /usr/bin/find . -name "*$1"; }

# Searches for a file using MacOS Spotlight's metadata.
spotlight() { mdfind "kMDItemDisplayName == '$1'wc"; }

# ---[ 4. PROCESS MANAGEMENT ---------------------------------------------------

# Finds the PID (Process ID) of a specified process using its command name.
findPid() { lsof -t -c "$1"; }

# Lists processes owned by the current user.
my_ps() { ps "$@" -u "$USER" -o pid,%cpu,%mem,start,time,bsdtime,command; }

# Provides useful host-related information:
# Including the current machine name, system details, users logged in,
# current date, machine stats, network location, and public-facing IP.
ii() {
	# Using color codes for display
	local RED='\033[0;31m'
	local NC='\033[0m' # No Color

	echo -e "\nYou are logged on ${RED}$HOST${NC}"
	echo -e "\nAdditional information:"
	uname -a
	echo -e "\n${RED}Users logged on:${NC}"
	w -h
	echo -e "\n${RED}Current date:${NC}"
	date
	echo -e "\n${RED}Machine stats:${NC}"
	uptime
	echo -e "\n${RED}Current network location:${NC}"
	scselect
	echo -e "\n${RED}Public facing IP Address:${NC}"
	myip
	# Uncomment the following line if you want to display DNS Configuration.
	#echo -e "\n${RED}DNS Configuration:${NC}"
	#scutil --dns
	echo
}

# ---[ 5. NETWORKING -----------------------------------------------------------

# Use dig to fetch the most useful DNS info for a domain
# Usage: digga domain.com
digga() { dig +nocmd "$1" any +multiline +noall +answer; }

# Get the public-facing IP address using dig and OpenDNS
# Usage: myip
myip() { dig +short myip.opendns.com @resolver1.opendns.com; }

# Extract CN and SANs from a domain's SSL certificate
# Usage: getcertnames domain.com
getcertnames() {
	[ -z "${1}" ] && {
		echo "ERROR: No domain specified."
		return 1
	}

	local domain="${1}"
	echo "Testing ${domain}â€¦" && echo

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ ${tmp} == *"-----BEGIN CERTIFICATE-----"* ]]; then
		# Extract relevant certificate info
		local certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_aux,no_header,no_issuer,no_pubkey,no_serial,no_sigdump,no_signame,no_validity,no_version")

		echo "Common Name:" && echo
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" -e "s/\/emailAddress=.*//"

		echo && echo "Subject Alternative Name(s):" && echo
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Fetch the whois record for a domain or URL, stripping extra info
# Usage: whois_domain domain.com OR whois_domain http://domain.com
whois_domain() {
	local domain=$(echo "$1" | awk -F/ '{print $3}')
	[ -z "$domain" ] && domain="$1"

	echo "Getting whois record for: $domain â€¦"
	/usr/bin/whois -h whois.internic.net "$domain" | sed '/NOTICE:/q'
}

# Get local IP addresses with hardware port and device info
# Usage: localip
localip() {
	# Iterate over all network interfaces
	while IFS= read -r interface; do
		# Get IP address for the interface
		local ip_addr=$(ipconfig getifaddr "$interface")

		# If an IP address was found, display it
		if [[ -n "$ip_addr" ]]; then
			echo -e "\x1B[32mðŸ“¶  $interface: \x1B[34m$ip_addr\x1B[m"
		fi
	done < <(networksetup -listallhardwareports | grep "Device: en" | awk '{print $2}')

	# Display MAC addresses
	echo "ðŸ“˜ Ethernet Addresses:"
	networksetup -listallhardwareports | grep "Ethernet Address:" | sed "s/Ethernet Address:/ðŸ“˜ /"
}

# ---[ 6. SYSTEM OPERATIONS & INFORMATION ----------------------------------------

#   Normalize `open` across Linux, macOS, and Windows.
#   This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# Open the current directory or a given file/directory with the system's default application
# Usage: o OR o file.txt OR o /path/to/directory/
o() { open "${1:-.}"; }

# Display a tree of the current directory, ignoring certain folders, and using pagination if output is long
# Usage: tre OR tre /path/to/directory/
tre() { tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX; }

# Check camera usage on macOS by inspecting processes accessing the iSight camera
# Usage: camerausedby
camerausedby() { lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{print $2}' | xargs ps; }

# ---[ 7. WEB DEVELOPMENT ------------------------------------------------------

# dataurl: Convert a file to a data URL format.
# Usage: dataurl <filename>
dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# server: Start an HTTP server from a directory on a specified port (default is 8000).
# Usage: server [port]
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# phpserver: Start a PHP server from a directory on a specified port (default is 4000).
# Requires PHP 5.4.0+
# Usage: phpserver [port]
phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# httpHeaders: Fetch headers from a web page.
# Usage: httpHeaders <URL>
httpHeaders() { /usr/bin/curl -I -L "$@"; }

# httpDebug: Download a web page and display timing statistics.
# Usage: httpDebug <URL>
httpDebug() { /usr/bin/curl "$@" -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n"; }

# ---[ 8. MAN PAGES ------------------------------------------------------------

# preman: View man pages in Preview app.
# Usage: preman <command>
preman() { man -t "$@" | open -f -a "Preview"; }

# xmanpage: Open man pages with x-man-page.
# Usage: xmanpage <command>
xmanpage() { open "x-man-page://$1"; }
# bbman: View man pages in BBEdit.
# Usage: bbman <command>
bbman() { MANWIDTH=80 MANPAGER='col -bx' man "$@" | bbedit --clean --view-top -t "man $1"; }
